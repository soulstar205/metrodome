{"version":3,"sources":["components/click1.wav","components/click2.wav","components/Park.mp3","components/button.jsx","components/input.jsx","components/clear.jsx","components/calculator.jsx","serviceWorker.js","components/Metronome.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","Input","input","Clear","handlClear","React","Component","Boolean","window","location","hostname","match","Metronome","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleBpmChange","event","bpm","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","count","_this$state","beatsPerMeasure","click2","play","click1","startStop","Audio","Park","bind","assertThisInitialized","_this$state2","onChange","type","min","max","ReactDOM","render","src_components_Metronome","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.207b19fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","module.exports = __webpack_public_path__ + \"static/media/Park.61b93bc2.mp3\";","import React from 'react'\r\nimport './button.css'\r\n\r\nconst isOperator = val =>{\r\n    return !isNaN(val) || val===\".\" || val === \"=\"\r\n}\r\n\r\nconst Button = props => {\r\n   \r\n    \r\n    return(\r\n        <div className={`button-wrapper & ${isOperator(props.children)? null : \"operator\"}`} \r\n        onClick={() => {props.handleClick(props.children)}}>\r\n            {props.children}\r\n        </div>\r\n        )\r\n\r\n    \r\n}\r\nexport default Button","import React from 'react'\r\nimport './button.css'\r\n\r\nconst Input = props => {\r\n   return  <div className=\"input\">{props.input}</div>\r\n}\r\nexport default Input","import React from 'react'\r\nimport './button.css'\r\n\r\nconst Clear = props =>{\r\n    return <div className=\"clear-btn\" onClick={props.handlClear}>{props.children}</div>\r\n}\r\nexport default Clear","import React from 'react'\r\nimport './calculator.css'\r\nimport Button from './button'\r\nimport Input from './input'\r\nimport Clear from './clear'\r\n\r\nclass Calculator extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            input: \" \",\r\n            \r\n        }\r\n       this.addToiInput = this.addToiInput.bind(this)\r\n    }\r\n\r\n    addToiInput = val =>{\r\n        this.setState({input: this.state.input + val})\r\n    }\r\n    \r\n   \r\n\r\n    render(){\r\n    \r\n        return(\r\n            <div>\r\n            <div className=\"row\">\r\n                <Input display={this.state.input}/>\r\n            </div>\r\n            <div className=\"row\">\r\n               <Button onClick={this.addToInput}>8</Button>\r\n               <Button handleClick={this.addToInput}>9</Button>\r\n               <Button handleClick={this.addToInput}>7</Button>\r\n               <Button handleClick={this.addToInput}>/</Button>\r\n            </div>\r\n            <div className=\"row\">\r\n               <Button handleClick={this.addToInput}>4</Button>\r\n               <Button handleClick={this.addToInput}>5</Button>\r\n               <Button handleClick={this.addToInput}>6</Button>\r\n               <Button handleClick={this.addToInput}>+</Button>\r\n            </div>\r\n            <div className=\"row\">\r\n               <Button handleClick={this.addToInput}>1</Button>\r\n               <Button handleClick={this.addToInput}>2</Button>\r\n               <Button handleClick={this.addToInput}>3</Button>\r\n               <Button handleClick={this.addToInput}>-</Button>\r\n            </div>\r\n            <div className=\"row\">\r\n               <Button handleClick={this.addToInput}>.</Button>\r\n               <Button handleClick={this.addToInput}>0</Button>\r\n               <Button >=</Button>\r\n               <Button handleClick={this.addToInput}>*</Button>\r\n            </div>\r\n            <div className=\"row\">\r\n                <Clear handleClear={()=>this.setState({display: ''})}>Clear</Clear>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Calculator","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react'\r\nimport './Metronome.css'\r\nimport click1 from './click1.wav'\r\nimport click2 from './click2.wav'\r\nimport Park from './Park.mp3'\r\n\r\n\r\nclass Metronome extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.click1 = new Audio(click1)\r\n        this.click2 = new Audio(click2)\r\n        this.Park = new Audio(Park)\r\n        this.state={\r\n            playing : false,\r\n            count: 0,\r\n            bpm: 100,\r\n            beatsPerMeasure: 4,\r\n            \r\n        }\r\n        this.handleBpmChange = this.handleBpmChange.bind(this)\r\n        this.startStop = this.startStop.bind(this)\r\n    }\r\n\r\n    handleBpmChange = event =>{\r\n        const bpm = event.target.value\r\n        if(this.state.playing){\r\n            clearInterval(this.timer)\r\n            this.timer = setInterval(this.playClick, (bpm / 60) * 1000)\r\n            this.setState({\r\n                count: 0,\r\n                bpm\r\n            })\r\n        }else{\r\n            this.setState({bpm})\r\n        }\r\n        \r\n        \r\n    } \r\n    playClick = () =>{\r\n        const {count, beatsPerMeasure} = this.state\r\n        if (count / beatsPerMeasure === 0){\r\n            this.click2.play()\r\n        }else{\r\n            this.click1.play()\r\n        }\r\n        this.setState(state => ({\r\n            count: (state.count + 1) % this.beatsPerMeasure\r\n        }))\r\n    } \r\n    startStop=()=>{\r\n        if(this.state.playing){\r\n            clearInterval(this.timer)\r\n            this.setState({\r\n                playing : false\r\n            })\r\n        }else{\r\n            this.timer = setInterval(\r\n                this.playClick, (60 / this.state.bpm) * 1000\r\n            )\r\n            this.setState({\r\n                count: 0,\r\n                playing: true\r\n            })\r\n            this.playClick()\r\n        }\r\n        \r\n    }\r\n    \r\n    render(){\r\n        const { playing, bpm} = this.state\r\n\r\n        return(\r\n            <div className='metronome'>\r\n\r\n                <div >\r\n                    <h2>Simple Metrodome</h2>\r\n                    <div>{bpm} BPM</div>\r\n                    <input \r\n                        className='bpm-slider'\r\n                        onChange={this.handleBpmChange} \r\n                        type=\"range\" \r\n                        min='60' \r\n                        max='240' \r\n                        value={bpm}\r\n                    />\r\n                </div>\r\n                <button \r\n                    onClick={this.startStop}\r\n                    className='metronome-button'>\r\n                    {playing ? 'Stop' : 'Start'} \r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Metronome","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './components/calculator.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport Metrodome from './components/Metronome'\n\nReactDOM.render(<Metrodome/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}